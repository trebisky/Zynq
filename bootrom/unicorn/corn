#!/usr/bin/env python
# Sample code for ARM of Unicorn. Nguyen Anh Quynh <aquynh@gmail.com>
# Python sample ported by Loi Anh Tuan <loianhtuan@gmail.com>

##from __future__ import print_function

from unicorn import *
from unicorn.arm_const import *

import struct

class Zynq_Rom () :

    def __init__ ( self ) :
        f = open ( "../bootrom.bin", mode="rb" )
        rom_code = f.read ()
        f.close ()
        print ( len(rom_code), " bytes in rom image" )

        base = 0
        self.emu = Uc ( UC_ARCH_ARM, UC_MODE_ARM )
        self.emu.mem_map ( base, 128 * 1024 )
        self.emu.mem_write ( base, rom_code )

    def reg_set ( self, rr, val ) :
        self.emu.reg_write ( rr, val )

    def reg_show ( self, rname, rr ) :
        print("-- ", rname, ": %x" % self.emu.reg_read ( rr ) )

    def get_pc ( self ) :
        return self.emu.reg_read ( UC_ARM_REG_PC )

    def fbit ( self, cpsr, mask, code ) :
        if cpsr & mask :
            flag = code
        else :
            flag = "."
        return flag

    def flags ( self, cpsr ) :
        flags = ""
        flags += self.fbit ( cpsr, 0x80000000, "N" )
        flags += self.fbit ( cpsr, 0x40000000, "Z" )
        flags += self.fbit ( cpsr, 0x20000000, "C" )
        flags += self.fbit ( cpsr, 0x10000000, "V" )
        flags += self.fbit ( cpsr, 0x08000000, "Q" )
        return flags

    def show_regs ( self ) :
        self.reg_show ( "pc", UC_ARM_REG_PC )
        self.reg_show ( "r0", UC_ARM_REG_R0 )
        self.reg_show ( "r1", UC_ARM_REG_R1 )
        self.reg_show ( "r2", UC_ARM_REG_R2 )
        self.reg_show ( "r3", UC_ARM_REG_R3 )
        self.reg_show ( "r4", UC_ARM_REG_R4 )

        cpsr = self.emu.reg_read(UC_ARM_REG_CPSR)
        h_cpsr = "0x{:04x}".format(cpsr)

        flags = self.flags ( cpsr )
        print("  CPSR = " + flags + " " + h_cpsr )
        #print("  CPSR = 0x{:08x}".format(self.emu.reg_read(UC_ARM_REG_CPSR)))
        #print("  SPSR = 0x{:08x}".format(self.emu.reg_read(UC_ARM_REG_SPSR)))

    # Run, single stepping
    def run ( self ) :
        #start = 0x658
        #limit = 0x698
        start = 0xb43c
        limit = 0x10000

        pc = start

        self.reg_set ( UC_ARM_REG_CPSR, 0x01d3 )

        self.reg_set ( UC_ARM_REG_R0, 0xab )
        self.reg_set ( UC_ARM_REG_R1, 0xf )

        # Our code has a spin loop here
        self.reg_set ( UC_ARM_REG_LR, 0xd0 )

        self.show_regs ()

        while True:
            msg = "PC = %x, ready:" % pc
            data = input ( msg )
            if data == 'q' :
                break
            self.emu.emu_start ( pc, limit, count=1 )
            self.show_regs ()
            pc = self.get_pc ()

    def run_range ( self ) :
        # This runs from Start, up to but not including stop
        start = 0x658
        stop = 0x664
        self.emu.emu_start ( start, stop )

        self.reg_show ( "pc", UC_ARM_REG_PC )
        self.reg_show ( "r0", UC_ARM_REG_R0 )
        self.reg_show ( "r1", UC_ARM_REG_R1 )

def run_zynq () :
    try:
        rom = Zynq_Rom ()
        rom.run ()
        #rom.run_range ()

    except UcError as e:
        print("Zynq emulation error: %s" % e)

run_zynq ()

# ===============================================================================

# Test ARM (from the published ARM demo)

# callback for tracing basic blocks
def hook_block(uc, address, size, user_data):
    print(">>> Tracing basic block at 0x%x, block size = 0x%x" %(address, size))


# callback for tracing instructions
def hook_code(uc, address, size, user_data):
    print(">>> Tracing instruction at 0x%x, instruction size = 0x%x" %(address, size))

# code to be emulated
#ARM_CODE   = b"\x37\x00\xa0\xe3\x03\x10\x42\xe0"

# I like this better (32 bit instructions)
# mov r0, #0x37; sub r1, r2, r3
arm_list = [ 0xe3a00037, 0xe0421003 ]

# memory address where emulation starts
ADDRESS    = 0x10000

class Demo () :
    def __init__ ( self ) :
        #arm_pack = struct.pack ( "<2L", *arm_list)
        arm_pack = struct.pack ( "<{}L".format(len(arm_list)), *arm_list)
        print ( len(arm_list), " ARM instructions" )
        print ( len(arm_pack), " bytes when packed" )

        base = ADDRESS
        self.emu = Uc ( UC_ARCH_ARM, UC_MODE_ARM )
        self.emu.mem_map ( base, 128 * 1024 )

        # write machine code to be emulated to memory
        #self.emu.mem_write(base, ARM_CODE)
        self.emu.mem_write(base, arm_pack)

    def show_sctlr ( self ):
        # Read SCTLR
        # cp = 15
        # is64 = 0
        # sec = 0
        # crn = 1
        # crm = 0
        # opc1 = 0
        # opc2 = 0
        val = self.emu.reg_read(UC_ARM_REG_CP_REG, (15, 0, 0, 1, 0, 0, 0))
        print(">>> SCTLR = 0x%x" % val)

    def run ( self ) :

        print("Emulate ARM code")
        self.show_sctlr ()
        # initialize machine registers
        self.emu.reg_write(UC_ARM_REG_R0, 0x1234)
        self.emu.reg_write(UC_ARM_REG_R2, 0x6789)
        self.emu.reg_write(UC_ARM_REG_R3, 0x3333)
        self.emu.reg_write(UC_ARM_REG_APSR, 0xFFFFFFFF) #All application flags turned on
   
        # tracing all basic blocks with customized callback
        self.emu.hook_add(UC_HOOK_BLOCK, hook_block)

        # tracing one instruction at ADDRESS with customized callback
        self.emu.hook_add(UC_HOOK_CODE, hook_code, begin=ADDRESS, end=ADDRESS)

        # emulate machine code in infinite time
        #mu.emu_start(ADDRESS, ADDRESS + len(ARM_CODE))
        self.emu.emu_start(ADDRESS, ADDRESS + 4*len(arm_list))

        # now print out some registers
        print(">>> Emulation done. Below is the CPU context")

        r0 = self.emu.reg_read(UC_ARM_REG_R0)
        print(">>> R0 = 0x%x" %r0)
        r1 = self.emu.reg_read(UC_ARM_REG_R1)
        print(">>> R1 = 0x%x" %r1)
        pc = self.emu.reg_read(UC_ARM_REG_PC)
        print(">>> PC = 0x%x" %pc)

        self.show_sctlr ()

#demo = Demo ()
#demo.run ()

# THE END
